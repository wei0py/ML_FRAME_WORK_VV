   2      ! ntype
   6     ! iat_type_1
   29    ! iat_type_2
   5.0,100 Rc,m_neigh
   29       ! iat_class
   4        ! nbond
   1, 3.0 12,2.0,0.5,1.0,0.5,10  ! itype,Rc,nxp,Rg,dRg,XX,scale,nk
   2, 3.0 12,2.0,0.5,1.0,0.5,10  ! itype,Rc,nxp,Rg,dRg,XX,scale,nk
   2, 5.0 12,2.0,0.5,1.0,0.5,10  ! itype,Rc,nxp,Rg,dRg,XX,scale,nk
   2, 5.0 4, 4.0,0.5,1.0,0.6,10  ! itype,Rc,nxp,Rg,dRg,XX,scale,nk
   0       ! nangle
   2,2,4.0,30,20,20,0.5,10  !itype1,itype2,Rc,theta,dtheta,nxp,scale,nk

   0,0,4.0,90,20,20,0.5,10  !itype1,itype2,Rc,theta,dtheta,nxp,scale,nk
----------------------------------------------------------
This is the input for classification.f90. This codes tries to identify different 
clusters. The idea is to look at the atomic motifs (the first neighbore shell) surrounding 
each atom, and identify different patterns. First, it requires an Rc to define the motifs 
(one can check the feature for the pair potential, e.g., from the feat_ave.1 generated from 
 gen_feature.f90, to check the first nearest neighbore peack, 
 perhaps need to further refine that for ntype > 1). 

 "ntype": is the number of atom types, it will be followed by ntype lines of Z(iat_type), 
 "Rc": is the cut-off radius to investigate the motif, please use something 1.2-1.4 larger than 
 the nearest neighbor bond length. 
 "iat_class": is the Z for this type to do classification. Obviously, different type will have
 different classification. Here, we will only do one Z atom type at a time.  

 Now, to disinguish different motifs, we will use nbond (number of different bond type), and 
 nangle (number of angle type), to make feature out of it, and use these feature amplitudes
 to define different motifs. The values of these features are discretized into nk grid points. 
 We will use the peaks on the population of this multi-dimension grids to define the category. 
 Perhaps in the future, we can use other methods from the population to define categories, 
 but right now, we will use this local peak. 

"nbond" the number of bonds, it will be followed by nbonds lines:
"itype,nxp,nk,scale": itype: the type of the bonded atom (not the center atom, the center atom
is iat_class); nxp an exponent, to be explained later; nk the number of gride point, suggest 
to be around 10, to discretize this bond feature amplitude. Please don't be too large, other 
wise, the array prob will be too large; scale is a factor to scale the feature. For the 
feature distribution, please plot test.dist.  

The bond feature is defined as: f_bond=\sum_(i.in.itype) (1-sin(bond(i)/Rc*pi/2)**nexp)*scale
So, we can control the feature by choosing different itype, and different nexp. 
nexp=20 or 30, to be the total number of itype atoms within Rc, while nexp=2,4,6, can probe 
the bond(i) within the Rc. 

>  1, 3.0 12,2.0,0.5,1.0,0.8,10  ! itype,Rc,nxp,Rg,dRg,XX,scale,nk
f_bond=\sum_(i.in.itype) [(1-sin(bond(i)/Rc*pi/2)**nxp)*xx+exp(-(bond(i)-Rg)**2/dRg**2)*(1-xx)]*scale
larger scale (e.g, 1.0) will spread out the distribution, make more clusters
nk is the number of grid point to host this dimension


"nangle" the number of angles, it will be followed by nangle lines:
"theta,dtheta,nxp,nk,scale": theta the bond angles between two neighboring atoms (within Rc) and 
the center atom. dtheta is the Gaussian width to include this angle, nxp is an exponent to be explained 
below, nk is the descrited grid, and scale is a scale factore. Note, right now, we don't have 
atom types to distinguish the angles. If needed, we can add that on later. 


> 0,0,4.0,90,20,20,0.5,10  !itype1,itype2,Rc,theta,dtheta,nxp,scale,nk
This angle feature is defined as:
 f_angle=\sum_(i,j,in Rc,i.eq.itype1,j.eq.itype2) exp(-(theta_ij-theta)^2/dtheta^2) (1-sin(bond(i)/Rc*pi/2)**nexp)*
                                                            (1-sin(bond(j)/Rc*pi/2)**nexp)*scale
>
Same feature for scale and nk
if itype=1, means any type will be fine. 

So, each f_bond will be discretized to ik1 (within nk), and f_angle to ik2 (within nk). 
Thus, we will place each atom according to it (ik1,ik2,.....ik_ndim)   (ndim=nbond+nangle), 
we thus have a ndim population array: prob(ik1,ik2,..., ik_ndim). We will base on this array 
to find its local maximum, and use that to classify different types in this system. 

Finally, the classified marker will be rewritten in MOVEMENT.cluster as the last column. 
(note, right now, it only classify one atom type: iat_class). 

 

   
